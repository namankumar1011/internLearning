Major difference between an array and list is that list can store values of various datatypes but array can only store values of a single datatype.
Lists are used to store multiple items in a single variable more like arrays in different programming languages.
Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
Lists are created using square brackets:
List items are ordered, changeable, and allow duplicate values.
If you add new items to a list, the new items will be placed at the end of the list.
The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.
Since lists are indexed, lists can have items with the same value:
To determine how many items a list has, use the len() function:
List items can be of any data type:
From Python's perspective, lists are defined as objects with the data type 'list' : <class 'list'>
Complexities for Adding elements in a Lists(append() method):
Time Complexity: O(1)
Space Complexity: O(1)

append() method only works for the addition of elements at the end of the List, for the addition of elements at the desired position, insert() method is used. Unlike append() which takes only one argument, the insert() method requires two arguments(position, value).

Complexities for Adding elements in a Lists(insert() method):
Time Complexity: O(n)
Space Complexity: O(1)

Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable\*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered\*\* and changeable. No duplicate members.

\*Set items are unchangeable, but you can remove and/or add items whenever you like.
\*\*As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

The insert() method inserts an item at the specified index:
To add an item to the end of the list, use the append() method:
To append elements from another list to the current list, use the extend() method.
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
The remove() method removes the specified item.
The pop() method removes the specified index.
If you do not specify the index, the pop() method removes the last item.
The del keyword also removes the specified index: The del keyword can also delete the list completely.
The clear() method empties the list. The list still remains, but it has no content.

The Syntax for list comprehension
newlist = [expression for item in iterable if condition == True]

List objects have a sort() method that will sort the list alphanumerically, ascending, by default:
The reverse() method reverses the current sorting order of the elements.
You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.
There are ways to make a copy, one way is to use the built-in List method copy().
Another way to make a copy is to use the built-in method list().

Python has a set of built-in methods that you can use on lists.

Method Description
append() Adds an element at the end of the list
clear() Removes all the elements from the list
copy() Returns a copy of the list
count() Returns the number of elements with the specified value
extend() Add the elements of a list (or any iterable), to the end of the current list
index() Returns the index of the first element with the specified value
insert() Adds an element at the specified position
pop() Removes the element at the specified position
remove() Removes the item with the specified value
reverse() Reverses the order of the list
sort() Sorts the list


packing of tuple/list:
it is done in function defination when we paas many arguments in function calling. single star is used.

unpacking of tuple/list:
it is done in function calling when we paas only one argument. single star is used.